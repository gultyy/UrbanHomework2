"""
Задача "Многопроцессное считывание":
Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.

Создайте функцию read_info(name), где name - название файла. Функция должна:

    Создавать локальный список all_data.
    Открывать файл name для чтения.
    Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
    Во время считывания добавлять каждую строку в список all_data.

Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.

    Создайте список названий файлов в соответствии с названиями файлов архива.
    Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в
    консоль.
    Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер with и объект
    Pool. Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов. Измерьте
    время выполнения и выведите его в консоль.

Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности, предварительно
закомментировав другой.
"""
from datetime import datetime
import multiprocessing


def read_info(name):
    all_data = []
    with open(name, 'r') as f:
        while True:
            line = f.readline()
            if line == '':
                break
            all_data.append(line)


filenames = [f'./file {number}.txt' for number in range(1, 5)]

# 1
# start = datetime.now()
# for f_name in filenames:
#     read_info(f_name)
# end = datetime.now()
# print(f'Время исполнения для линейного варианта: {end - start}')

# 2
if __name__ == '__main__':
    with multiprocessing.Pool(processes=4) as pool:
        start = datetime.now()
        pool.map(read_info, filenames)
        end = datetime.now()
    print(f'Время исполнения для многопроцессорного варианта: {end - start}')
